package ${project.packageName}.controller;

import java.io.IOException;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import ${project.packageName}.bean.ai.SemanticSearch;
import ${project.packageName}.service.WechatAIService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

@Api(value = "/ai", description = "智能接口")
@RestController
@RequestMapping("/ai")
public class AIController {

	
	@Autowired
	private WechatAIService wechatAIService;
	
	/**
	 * {
		  "appid": "wx24eb3810aaac8ee5",
		  "category": "weather",
		  "city": "珠海",
		  "latitude": 0,
		  "longitude": 0,
		  "query": "珠海明天的天气预报",
		  "region": "string",
		  "uid": "oTTBy0k_QA90gT3NDhsxJFkBUe94"
		}
	 * @param search
	 * @return
	 */
	@ApiOperation(value = "语义理解", notes = "根据自己的产品特点，选择相应的服务即可搭建一套智能语义服务、\n\r"
			+ "query:输入文本串    category:需要使用的服务类型，多个用“，”隔开，不能为空\n\r"
			+ "latitude:纬度坐标，与经度同时传入；与城市二选一传入\n\r"
			+ "longitude:经度坐标，与纬度同时传入；与城市二选一传入\n\r"
			+ "city:城市名称，与经纬度二选一传入\n\r"
			+ "region:区域名称，在城市存在的情况下可省；与经纬度二选一传入\n\r"
			+ "appid:公众号唯一标识，用于区分公众号开发者\n\r"
			+ "uid:用户唯一id（非开发者id），用户区分公众号下的不同用户（建议填入用户openid），如果为空，则无法使用上下文理解功能。appid和uid同时存在的情况下，才可以使用上下文理解功能。\n\r")
	@PostMapping("/semantic")
	@ResponseBody
	public String semantic(@RequestBody SemanticSearch search) {
		
		return wechatAIService.semanticSearch(search);

	}
	
	@ApiOperation(value = "语音转文字接口", notes = "语音转文字接口  ")
	@PostMapping(value = "/translateVoice",consumes=" multipart/*", headers="Content-type=multipart/form-data")
	@ResponseBody
	public String translateVoice(@ApiParam(value="文件格式 （只支持mp3，16k，单声道，最大1M）")@RequestParam MultipartFile file,
			@ApiParam(value="语音唯一标识  ") @RequestParam String voiceId,
			@ApiParam(value="语言，zh_CN 或 en_US，默认中文") @RequestParam(required = false) String lang,
			HttpServletResponse response) throws IOException {
		
		
		return wechatAIService.translateVoice(file,voiceId,lang);
		
	}
	
	@ApiOperation(value = "文本翻译接口", notes = "提供英汉、汉英文本翻译服务。   ")
	@PostMapping(value = "/translateTxt",consumes=" multipart/*", headers="Content-type=multipart/form-data")
	@ResponseBody
	public String translateTxt(@ApiParam(value="file:上传文件（utf8格式，最大600Byte)")@RequestParam MultipartFile file, 
			@ApiParam(value="源语言，zh_CN 或 en_US")@RequestParam String lfrom, 
			@ApiParam(value="目标语言，zh_CN 或 en_US")@RequestParam String lto) throws IOException {
		
		return wechatAIService.translateTxt(file,lfrom,lto);

	}
	

}

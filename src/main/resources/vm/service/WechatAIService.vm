package ${project.packageName}.service;

import java.io.File;
import java.io.IOException;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.multipart.MultipartFile;

import ${project.packageName}.bean.ai.SemanticSearch;
import ${project.packageName}.util.WechatApiUtil;

/**
 * 微信智能接口
 * @author admin
 *
 */
@Service
public class WechatAIService extends BaseWechatService{
	
	private static final Logger logger = LoggerFactory.getLogger(WechatAIService.class);
	
	
	public String semanticSearch(SemanticSearch search) {
		String accessToken = this.getAccessToken();
		String  url = WechatApiUtil.repleaceAccessToken(WechatApiUtil.AI_SEMANTIC, accessToken);
		logger.info("semanticSearch url: "+url);
		String ret = simpleRestTemplate.postForObject(url,search, String.class);
		logger.info("return: "+ret);
		
		return ret;
	}
	
	public String translateVoice( MultipartFile file,String voiceId,String lang) throws IOException {
		String accessToken = this.getAccessToken();
		String url = WechatApiUtil.repleaceAccessToken(WechatApiUtil.AI_ADD_VOICE, accessToken);
		url = url.replace("VOICE_ID", voiceId);
		url = url.replace("LANG", lang);
		logger.info("translateVoice url: "+url);
		//修改header
		HttpHeaders headers = new HttpHeaders();
		MediaType type = MediaType.parseMediaType("multipart/form-data");
		headers.setContentType(type);
		String cd = "filename=\"" + file.getOriginalFilename() + "\"";
		headers.add("Content-Disposition", cd);

		//生成临时文件读取文件
		String proClassPath = this.getClass().getResource("").getPath();
		String tempFileName = UUID.randomUUID() + file.getOriginalFilename();
		String tempFilePath = proClassPath + tempFileName;
		File tempFile = new File(tempFilePath);
		file.transferTo(tempFile);

		FileSystemResource resource = new FileSystemResource(tempFile);
		MultiValueMap<String, Object> param = new LinkedMultiValueMap<>();
		param.add("file", resource);
	
		String replay ="";
		String  vreplay = simpleRestTemplate.postForObject(url, param, String.class);
		logger.info("vreplay:"+vreplay);
		if(vreplay.contains("ok")){
			
			String url2 = WechatApiUtil.repleaceAccessToken(WechatApiUtil.AI_QUERY_VOICE, accessToken);
			url2 = url2.replace("VOICE_ID", voiceId);
			replay = simpleRestTemplate.postForObject(url2, null, String.class);
		}
		logger.info("return:"+replay);
		
		try {
	        tempFile.delete();
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
		return replay;
		
	}
	public String translateTxt( MultipartFile file, String lfrom, String lto) throws IOException {
		String accessToken = this.getAccessToken();
		String url = WechatApiUtil.repleaceAccessToken(WechatApiUtil.AI_TRANSLATE_CONTENT, accessToken);
		url = url.replace("LFROM", lfrom);
		url = url.replace("LTO", lto);
		logger.info("translateTxt url: "+url);
		
		//修改header
		HttpHeaders headers = new HttpHeaders();
		MediaType type = MediaType.parseMediaType("multipart/form-data");
		headers.setContentType(type);
		String cd = "filename=\"" + file.getOriginalFilename() + "\"";
		headers.add("Content-Disposition", cd);

		//生成临时文件读取文件
		String proClassPath = this.getClass().getResource("").getPath();
		String tempFileName = UUID.randomUUID() + file.getOriginalFilename();
		String tempFilePath = proClassPath + tempFileName;
		File tempFile = new File(tempFilePath);
		file.transferTo(tempFile);

		FileSystemResource resource = new FileSystemResource(tempFile);
		MultiValueMap<String, Object> param = new LinkedMultiValueMap<>();
		param.add("file", resource);
	
		String  replay = simpleRestTemplate.postForObject(url, param, String.class);
		logger.info("return:"+replay);
		
		try {
	        tempFile.delete();
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
		return replay;
		
	}

}
